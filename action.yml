name: Install NSIS compiler
description: Install NSIS compiler in GitHub runners

inputs:

  distro:         # available since v2
    options:
    - 'negrutiu'  # https://github.com/negrutiu/nsis
    - 'official'  # https://nsis.sourceforge.io
    default: negrutiu
    required: false

  arch:
    description: ^ 
      NSIS architecture to install.
      Applies only when `distro` is set to `negrutiu`, which provides both `x86` and `amd64` compilers.
      Both `x86` and `amd64` compilers are able to build both `x86` and `amd64` installers.
      The default is `x86` which will replace the official NSIS installation that is pre-installed on GitHub Windows runners.
    options:
      - 'x86'
      - 'Win32'  # equivalent to x86
      - 'i386'   # equivalent to x86
      - 'i486'   # equivalent to x86
      - 'i586'   # equivalent to x86
      - 'i686'   # equivalent to x86
      - 'amd64'
      - 'x64'    # equivalent to amd64
      - 'x86_64' # equivalent to amd64
      - 'x86-64' # equivalent to amd64
    default: x86
    required: false

  install-dir:
    description: ^
      NSIS custom installation directory.
      The default location is `C:\Program Files (x86)\NSIS` for `x86` and `C:\Program Files\NSIS` for `amd64`.
      If the specified directory is invalid, the installer falls back to the default location.
    default: ''
    required: false

  register-path:
    description: ^
      Add NSIS installation directory to PATH environment variable.
      The default is `true`.
    options:
      - true
      - false
    default: true
    required: false

outputs:

  instdir:
    description: The installation directory of NSIS
    value: ${{steps.install.outputs.instdir}}
    
  version:
    description: The installed version of NSIS (e.g. "1.2.3.4")
    value: ${{steps.install.outputs.version}}

  arch:
    description: The architecture of NSIS compiler ("x86", "amd64")
    value: ${{steps.install.outputs.arch}}

branding:
  icon: package   # https://feathericons.com
  color: orange
  
runs:
  using: "composite"
  steps:
    - name: Validate Windows OS
      if: runner.os != 'Windows'
      shell: python
      run: |
        raise RuntimeError("This action only supports Windows runners.")

    - name: Install NSIS
      id: install
      shell: python
      run: |
        import os, sys
        if os.getenv('GITHUB_ACTION_PATH', ''):
          sys.path.insert(0, os.getenv('GITHUB_ACTION_PATH'))
        elif os.getenv('GITHUB_WORKSPACE', ''):
          sys.path.insert(0, os.getenv('GITHUB_WORKSPACE'))
        from action import *

        # list existing NSIS installations
        for makensis, instdir in nsis_list():
          print(f'Found nsis/{nsis_version(instdir)}-{pe_architecture(makensis)} in "{instdir}"')

        # when running in silent mode, NSIS installer doesn't completely uninstall existing installations, instead it only overwrites existing files
        # it happens that negrutiu-NSIS has more files than official-NSIS, so installing the official distro over negrutiu leaves some files behind
        # to avoid this we first completely uninstall any existing installation
        instdir = r'${{inputs.install-dir}}'
        if not instdir:
          if r'${{matrix.arch}}' == 'amd64':
            instdir = os.path.normpath(os.path.expandvars(r'%ProgramFiles%\NSIS'))
          elif r'${{matrix.arch}}' == 'x86':
            instdir = os.path.normpath(os.path.expandvars(r'%ProgramFiles(x86)%\NSIS'))
        if instdir and os.path.exists(instdir) and os.path.isdir(instdir) and os.path.exists(os.path.join(instdir, 'uninst-nsis.exe')):
          nsis_uninstall(instdir, unregister_path=(r'${{inputs.register-path}}'.lower() == 'true'))

        # download and install latest negrutiu/nsis
        outdir, outver, outarch = nsis_install(
          distro=r'${{inputs.distro}}',
          arch=r'${{inputs.arch}}',
          instdir=r'${{inputs.install-dir}}',
          register_path=(r'${{inputs.register-path}}'.lower() == 'true'),
          github_token=r'${{github.token}}'
          )

        # list existing NSIS installations
        for makensis, instdir in nsis_list():
          print(f'Found nsis/{nsis_version(instdir)}-{pe_architecture(makensis)} in "{instdir}"')

        # outputs
        with open(os.getenv('GITHUB_OUTPUT'), "a") as fo:
          fo.write(f"instdir={outdir}\n")
          fo.write(f"version={outver}\n")
          fo.write(f"arch={outarch}\n")
