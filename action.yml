name: Install NSIS
description: A GitHub Action to install negrutiu/nsis on Windows runners.

inputs:
  arch:
    default: x86
    required: false
    description: ^ 
      NSIS architecture to install.
      Both `x86` and `amd64` compilers can generate both `x86` and `amd64` installers.
      The default is `x86` which will overwrite the official NSIS installer that is preinstalled on Windows runners.
    options:
      - 'x86'
      - 'Win32'  # equivalent to x86
      - 'i386'   # equivalent to x86
      - 'i486'   # equivalent to x86
      - 'i586'   # equivalent to x86
      - 'i686'   # equivalent to x86
      - 'amd64'
      - 'x86_64' # equivalent to amd64
      - 'x64'    # equivalent to amd64

  register-path:
    default: true
    required: false
    description: ^
      Add NSIS directory to PATH environment variable.
      The default is `true`.
    options:
      - true
      - false

outputs:
  instdir:
    description: The installation directory of NSIS
    value: ${{steps.install.outputs.instdir}}
    
  version:
    description: The installed version of NSIS (e.g. "1.2.3.4")
    value: ${{steps.install.outputs.version}}

branding:
  icon: package   # https://feathericons.com
  color: orange
  
runs:
  using: "composite"
  steps:
    - name: Validate Windows OS
      if: runner.os != 'Windows'
      shell: python
      run: |
        raise RuntimeError("This action only supports Windows runners.")

    - name: Uninstall existing NSIS
      shell: python
      run: |
        import os, sys
        sys.path.insert(0, r'${{github.workspace}}')
        from action import *  # import the action.py module

        for instdir in nsis_list(verbose=True):
            nsis_uninstall(instdir, unregister_path=('${{inputs.register-path}}'.lower() == 'true'))

    - name: Install NSIS
      id: install
      shell: python
      run: |
        import re, os, sys

        print(f'-- os.name = {os.name}')
        print(f'-- sys.platform = {sys.platform}')

        # architecture
        arch = None
        arch_matrix = {'x86': ['x86', 'win32', 'i[3-6]86'], 'amd64': ['amd64', 'x86_64', 'x64']}
        for name, values in arch_matrix.items():
            for value in values:
                if re.match(value, '${{inputs.arch}}', re.IGNORECASE):
                    arch = name
        if not arch:
            raise ValueError(f'unsupported architecture { "${{inputs.arch}}" }')

        # inputs
        print(f'-- inputs.arch = {arch}')
        print(f'-- inputs.register-path = { "${{inputs.register-path}}" }')

        # outputs
        with open(os.getenv('GITHUB_OUTPUT'), "a") as fo:
          print(f"-- outputs.instdir = todo: NSIS install dir")
          fo.write(f"instdir=todo: NSIS install dir\n")
          print(f"-- outputs.version = todo: NSIS version")
          fo.write(f"version=todo: NSIS version\n")
